from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters.command import Command
import asyncio
import json
import os

API_TOKEN = "7971162900:AAH4vsTQOr4fYrhLSbWNjXr9tiLwj1pO82k"
ADMIN_ID = 6631055683

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot=bot)

ref = 0
CHANNELS = ["@stargift_channel"]

def load_json(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

referrals = load_json("referrals.json")
ballances = load_json("ballances.json")
user_gift_selection = load_json("gifts.json")
users = load_json("users.json")  # –ù–æ–≤—ã–π —Ñ–∞–π–ª

async def check_subscriptions(user_id):
    for channel in CHANNELS:
        member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
        if member.status in ("left", "kicked"):
            return False
    return True

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    if not await check_subscriptions(user_id):
        buttons = [
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/stargift_channel")],
            [InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subs")]
        ]
        await message.answer(
            "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        return

    first_time_user = str(user_id) not in users
    if first_time_user:
        users[str(user_id)] = True
        save_json("users.json", users)

        if str(user_id) not in ballances:
            ballances[str(user_id)] = 0
            save_json("ballances.json", ballances)

        parts = message.text.strip().split()
        if len(parts) > 1:
            inviter_id = parts[1]

            if inviter_id.isdigit():
                inviter_id_int = int(inviter_id)

                if inviter_id_int != user_id:
                    if inviter_id not in referrals:
                        referrals[inviter_id] = []

                    if str(user_id) not in referrals[inviter_id]:
                        referrals[inviter_id].append(str(user_id))
                        save_json("referrals.json", referrals)

                        global ref
                        ref += 1

                        if str(inviter_id_int) not in ballances:
                            ballances[str(inviter_id_int)] = 0
                        ballances[str(inviter_id_int)] += 15
                        save_json("ballances.json", ballances)

                        try:
                            await bot.send_message(
                                chat_id=inviter_id_int,
                                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞—à—ë–ª –≤ –±–æ—Ç–∞ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! +15‚≠êÔ∏è"
                            )
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É: {e}")

    kb = [
        [types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")],
        [types.KeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω")],
        [types.KeyboardButton(text="–†–µ—Ñ–∫–∞")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç!", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "check_subs")
async def check_again(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    kb = [
        [types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")],
        [types.KeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω")],
        [types.KeyboardButton(text="–†–µ—Ñ–∫–∞")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    if await check_subscriptions(user_id):
        await callback_query.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!", reply_markup=keyboard)
        await send_welcome(callback_query.message)
    else:
        await callback_query.message.answer("–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!")
    await callback_query.answer()

@dp.message(F.text == "–†–µ—Ñ–∫–∞")
async def send_ref(message: types.Message):
    await message.answer(f"–î–µ—Ä–∂–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!\nhttps://t.me/kiberly74_bot?start={message.from_user.id}")

@dp.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def send_portfolio(message: types.Message):
    user_id = str(message.from_user.id)
    bal = ballances.get(user_id, 0)
    invited = sum([1 for users in referrals.values() if user_id in users])
    await message.answer(f"–¢—ã —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —á–µ–ª–æ–≤–µ–∫: {invited}\n–£ —Ç–µ–±—è –Ω–∞ –±–∞–ª–∏–∫–µ - {bal}‚≠êÔ∏è")

@dp.message(F.text == "–ú–∞–≥–∞–∑–∏–Ω")
async def send_shop(message: types.Message):
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíù –°–µ—Ä–¥–µ—á–∫–æ, 15‚≠êÔ∏è", callback_data="—Å–µ—Ä–¥—Ü–µ")],
        [InlineKeyboardButton(text="üß∏ –ú–∏—à–∫–∞, 15‚≠êÔ∏è", callback_data="–º–∏—à–∫–∞")]
    ])
    await message.answer("–°–µ–π—á–∞—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ:", reply_markup=inline_kb)

@dp.callback_query(lambda c: c.data in ["–º–∏—à–∫–∞", "—Å–µ—Ä–¥—Ü–µ"])
async def gift_callback(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    gift = callback_query.data

    if ballances.get(user_id, 0) < 15:
        await callback_query.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
        await callback_query.answer()
        return

    ballances[user_id] -= 15
    save_json("ballances.json", ballances)

    user_gift_selection[user_id] = gift
    save_json("gifts.json", user_gift_selection)

    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n\n–í–ê–ñ–ù–û: –µ—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ, –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
    await callback_query.answer()

@dp.message(F.text)
async def handle_username(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in user_gift_selection:
        gift = user_gift_selection.pop(user_id)
        save_json("gifts.json", user_gift_selection)

        inline_kb_admin = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{user_id}")],
            [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}")]
        ])
        await message.answer("–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        try:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=f"–ó–∞—è–≤–∫–∞ –æ—Ç @{message.from_user.username} –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ '{gift}'",
                reply_markup=inline_kb_admin
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

@dp.callback_query(lambda c: c.data.startswith("reject:"))
async def reject_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(":")[1])
    try:
        await bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ :(")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    await callback_query.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

@dp.callback_query(lambda c: c.data.startswith("accept:"))
async def accept_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(":")[1])
    try:
        await bot.send_message(user_id, "–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞! :)")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    await callback_query.answer("–ü—Ä–∏–Ω—è—Ç–æ.")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
